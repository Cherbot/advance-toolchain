#!/usr/bin/expect
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Automatically check for new versions, creates the chroot and runs the FVTR

source ./shared.exp

set chroot_dir		chroot
set chroot_script	test_version.exp
set fvtr_dir		fvtr
set fvtr_file		fvtr.tar.bz2
set fvtr_logs		fvtr-logs.tar.gz

set log_file [exec date +%F_%T].log

# Message levels
set WARNING	0
set IMPORTANT	1
set ERROR	2


log_user 0
log_file -noappend -a $log_file

set email_msg ""

# Before creating the chroot, it's required to mount some file systems
# Without this, the script executed inside the chroot may fail
proc mount_fs {} {
	global chroot_dir
	exec mount -v --bind /dev ${chroot_dir}/dev
	exec mount -vt devpts devpts ${chroot_dir}/dev/pts
	exec mount -vt tmpfs shm ${chroot_dir}/dev/shm
	exec mount -vt "proc" "proc" ${chroot_dir}/proc
	exec mount -vt sysfs sysfs ${chroot_dir}/sys
}

proc umount_fs {} {
	global chroot_dir
	exec umount ${chroot_dir}/sys
	exec umount ${chroot_dir}/proc
	exec umount ${chroot_dir}/dev/shm
	exec umount ${chroot_dir}/dev/pts
	exec umount ${chroot_dir}/dev
}

proc remove_chroot {} {
	global chroot_dir

	# Deleting the chroot before unmounting all filesystems binds might
	# cause you a lot of trouble
	set mount_list [exec mount]
	foreach line [split $mount_list "\n"] {
		if {[regexp "([pwd]/${chroot_dir}\[^\ \]*)" $line match \
			 mount]} {
			log "Can't remove chroot because $mount is still mounted" $ERROR
			exit 1
		}
	}
	file delete -force ./${chroot_dir}/
}

# Log messages
proc log [list msg [list level $WARNING]] {
	global email_msg
	global WARNING
	global IMPORTANT
	global ERROR

	switch $level \
		$IMPORTANT {
			set hdr "Important"
		} \
		$ERROR {
			set hdr "Error"
		} \
		default {
			set hdr "Warning"
		}

	# Ignore warning messages when sending emails
	if {$level > $WARNING} {
		append email_msg "${hdr}: ${msg}\n"
	}

	send_log "[exec date {+%F %T}] ${hdr}: $msg\n"
}

proc send_email_posix {email_msg} {
	global RECIPIENTS
	global log_file

	set EOF "\004"

	set to ""
	foreach addr $RECIPIENTS {
		append to "${addr} "
	}

	# Only attach log files smaller than 1MB
	if {[file size $log_file] < 1048576} {
		spawn mail -a $log_file $to
	} else {
		spawn mail $to
	}

	expect {
		"Subject:" {
			send "Results of AT tests\n"
			send "$email_msg\n"
			send $EOF
		}
		default {
			send_user "Email submission failed.\n"
			exit
		}
	}

	expect {
		"EOT" {
			# Wait until mail finishes sending the email
			sleep 5
		}
	}
}

proc send_email_tcl {email_msg} {
	global RECIPIENTS
	global SMTP_SERVER
	global log_file

	set to ""
	foreach addr $RECIPIENTS {
		append to "${addr}, "
	}

	set bodyT [mime::initialize -canonical text/plain -string $email_msg]
	set message [list $bodyT]

	# Only attach log files smaller than 1MB
	if {[file size $log_file] < 1048576} {
		set logT [mime::initialize -canonical text/plain \
			      -header [list Content-Disposition \
				       "attachment; filename=log"] \
			  -file $log_file]
		lappend message $logT
	}

	set msgT [mime::initialize -canonical multipart/mixed -parts \
		      $message]
	mime::setheader $msgT Subject "Results of AT tests"
	smtp::sendmessage $msgT \
	    -header [list To $to] -servers $SMTP_SERVER
	mime::finalize $logT
	mime::finalize $bodyT
	mime::finalize $msgT
}

proc send_email {email_msg} {
	global MAIL_SYS

	switch $MAIL_SYS {
		"tcl" {
			send_email_tcl $email_msg
		}
		default {
			send_email_posix $email_msg
		}
	}
}

proc finalize {{ret 0}} {
	global email_msg
	if {$email_msg != ""} {
		send_email $email_msg
	}
	exit $ret
}

# Create a tarball with the logs of the FVTR
proc save_fvtr_logs {} {
	global chroot_dir
	global fvtr_dir
	global fvtr_logs

	set old_dir [pwd]
	file delete -force ${old_dir}/${fvtr_logs}

	cd ${chroot_dir}/root/
	set files [exec find ./${fvtr_dir} -name *.log -printf "%p "]
	if {[llength $files] > 0} {
		eval exec tar -czf ${old_dir}/${fvtr_logs} $files
	}
	cd ${old_dir}
}


if { ![file exists ${config_dir}/${config_file}] } {
	log "Can't find the global settings in ${config_dir}/${config_file}." \
	    ${ERROR}
	finalize 1
}
source ${config_dir}/${config_file}

# Look for requirements to send email
switch $MAIL_SYS {
	"tcl" {
		package require smtp 1.0
		package require mime 1.0
	}
	default {
		# Use POSIX mail command as default
		set MAIL_SYS mail
	}
}

# Delete FVTR logs to make sure we aren't going to make a confusion
if {[file exists ${fvtr_logs}]} {
	file delete ${fvtr_logs}
}

foreach repo_dir [glob -directory $config_dir -type d *.repo] {
	log "Checking repository ${repo_dir}..."
	if {[file exists ${chroot_dir}]} {
		log "There is a broken chroot available." ${ERROR}
		log "Remove it manually and try again." ${ERROR}
		finalize 1
	}

	# Read settings
	source $repo_dir/$config_file

	# Check if there are updates
	if {[catch {exec ./get_versions.exp $repo_dir} new_versions]} {
		if {[string first "BSO" $new_versions] >= 0} {
			log "Authenticate through BSO to check repository ${repo_dir}" ${IMPORTANT}
			continue
		}
		log "Failed to get new versions for ${repo_dir}" ${ERROR}
		finalize 1
	}

	foreach version $new_versions {
		log "Testing version ${version} from ${repo_dir}" ${IMPORTANT}
		switch $distro {
			"SLES" {
				set tarball chroot_SLES11.2.tar.gz
				set at_config "at${version}-SLES10"
			}
			"RHEL" {
				set tarball chroot_RHEL6.2.tar.gz
				set at_config "at${version}-RHEL5"
			}
			default {
				log "Unrecognized distribution: $distro" ${ERROR}
				finalize 1
			}
		}
		exec tar -xzf $tarball >@stdout 2>@stderr

		# Untar the FVTR
		exec tar -C ${chroot_dir}/root -xjf ${fvtr_file} >@stdout \
		    2>@stderr

		# Copy the script that runs inside the chroot
		file copy ./${chroot_script} ./${chroot_dir}/root/

		# Grab the config file
		if {[catch {exec wget -q ${at_config_repo}/${at_config} \
				-O ./${chroot_dir}/root/fvtr/at-config}]} {
			log "Failed to download the config file ${at_config_repo}/${at_config}" $ERROR
			remove_chroot
			continue
		}

		if {$manual} {
			set chroot_args "--manual $gpg_key"
		} else {
			set chroot_args "$gpg_key"
		}
		set chroot_args "$chroot_args ftp://${server}${dir} ${version}"

		set failed_tests {}
		mount_fs

		eval spawn chroot ./${chroot_dir}/ /root/${chroot_script} \
		    $chroot_args
		# Wait for EOF
		expect {
			-timeout -1
			"(file \"/root/${chroot_script}\"" {
				# Something wrong happened inside the chroot
				# Exit, but maintain the chroot for analysis
				log "Unrecognized error caught inside the chroot" ${ERROR}
				log "Review the logs for more information and clear your chroot" ${ERROR}
				umount_fs
				finalize 1
			}
			-re "(\[^${BLANK}\\r\\n\]*)\[^\\r\\n\]+failed" {
				lappend failed_tests "$expect_out(1,string)"
				exp_continue
			}
			eof {}
		}

		if {[llength ${failed_tests}] > 0} {
			log "Failed tests: ${failed_tests}" $ERROR
		} else {
			log "Version ${version} in ${repo_dir} passed all tests!" ${IMPORTANT}
		}
		umount_fs
		save_fvtr_logs
		remove_chroot

		# Add to ignored list
		set ignore_pipe [open ${repo_dir}/$ignore_file a]
		puts $ignore_pipe "${version}"
		close $ignore_pipe
	}
}

finalize
