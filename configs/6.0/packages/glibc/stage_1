#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GLIBC build parameters for stage 1 32/64 bits
# =============================================
#

# We can't use the newly built gcc to compile glibc because it will set the
# dynamic linker to be ${dest}/lib/ld.so.1, which isn't installed until the
# glibc build finishes.  So trying to run anything compiled with the new gcc
# will fail, in particular, glibc configure tests.  I suppose you might be
# able to supply glibc configure with lots of libc_cv_* variables to
# avoid this, but then you'd forever be changing this script to keep up with
# new glibc configure tests.
# Note that dynamically linked programs built here with the old host gcc are
# subtly broken too;  The glibc build sets their dynamic linker to
# ${dest}/lib/ld.so.1 but doesn't provide rpath.  Which means you'll get the
# new ld.so trying to use the system libc.so, which doesn't work.  ld.so and
# libc.so share data structures so are tightly coupled.  To run the new
# programs, you need to set LD_LIBRARY_PATH for them, or better (so as to not
# affect forked commands that might need the system libs), run ld.so.1
# explicitly, passing --library-path as is done for localedef below.
# This is one of the reasons why you need to build glibc twice.

# Include some standard functions
source ${utilities}/bitsize_selection.sh

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'

# Required post install hacks (this one is run after the final install move)
atcfg_posti_hacks() {
	# Set location of base directory to replace depending on ${cross_build}
	if [[ "${cross_build}" == "no" ]]; then
		basedir="${at_dest}"
	else
		basedir="${dest_cross}/usr/"
	fi

	local bindir=${basedir}/$(find_build_bindir ${AT_BIT_SIZE})
	local libdir=${basedir}/$(find_build_libdir ${AT_BIT_SIZE})

	# Set the name of the loader to use based on bit size
	local ld_so="ld${AT_BIT_SIZE%32}.so.1"

	set -e
	# Replace ${libdir}/libc.so with a version compatible with binutils
	# built with the --with_sysroot option set to ${at_dest}
	[[ -e ${libdir}/libc.so ]] && mv -f ${libdir}/libc.so ${libdir}/libc.so.orig
	echo "/* GNU ld script"                                                > ${libdir}/libc.so
	echo "   Use the shared library, but some functions are only in"      >> ${libdir}/libc.so
	echo "   the static library, so try that secondarily."                >> ${libdir}/libc.so
	echo "   You will notice that the paths do not contain ${at_dest}."   >> ${libdir}/libc.so
	echo "   This is because the Advance Toolchain binutils uses"         >> ${libdir}/libc.so
	echo "   --with-sysroot which causes the linker to append ${at_dest}" >> ${libdir}/libc.so
	echo "   onto the paths found in this ld script.  */"                 >> ${libdir}/libc.so
	echo "GROUP ( libc.so.6 libc_nonshared.a AS_NEEDED ( ${ld_so} ) )"    >> ${libdir}/libc.so
	[[ -e ${libdir}/libc.so.orig ]] && rm ${libdir}/libc.so.orig
	set +e

	if [[ "${cross_build}" == "no" ]]; then
		local ld_so=${libdir}/ld${AT_BIT_SIZE%32}.so.1

		# Generate the required locales
		# Remove the locale-archive, because localedef does not read
		# empty files.  This was a dummy file created during the
		rm -f "${libdir}/locale/locale-archive"
		# Temporarily save the current build directory
		local build_stage_work="$(pwd)"
		pushd ${build_stage_work}/localedata > /dev/null
		${SUB_MAKE} -C "${ATSRC_PACKAGE_WORK}/localedata" \
			    objdir="${build_stage_work}" \
			    install_root="/" \
			    subdir=localedata \
			    install-locales
		popd > /dev/null
	fi
}

atcfg_pre_configure() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	local base_bindir=$(find_build_bindir ${AT_BIT_SIZE})
	local base_sbindir=$(find_build_sbindir ${AT_BIT_SIZE})
	local base_libexecdir=$(find_build_libexecdir ${AT_BIT_SIZE})
	if [[ "${cross_build}" == "no" ]]; then
		echo cross-compiling=yes                        >  ./configparms
		echo slibdir="${at_dest}/${base_libdir}"        >> ./configparms
		echo libdir="${at_dest}/${base_libdir}"         >> ./configparms
		echo bindir="${at_dest}/${base_bindir}"         >> ./configparms
		echo sbindir="${at_dest}/${base_sbindir}"       >> ./configparms
		echo libexecdir="${at_dest}/${base_libexecdir}" >> ./configparms
		echo rootsbindir="${at_dest}/${base_sbindir}"   >> ./configparms
	else
		echo cross-compiling=yes > ./configparms
	fi
}

atcfg_configure() {
	local base_target=$(find_build_target ${AT_BIT_SIZE})
	if [[ "${cross_build}" == "no" ]]; then
		# Configure command for native builds
		AUTOCONF="${autoconf}" \
		CC="${at_dest}/bin/gcc -m${AT_BIT_SIZE}" \
		CFLAGS="-g -O2 ${secure_plt:+-msecure-plt}" \
		libc_cv_forced_unwind="yes" \
		libc_cv_c_cleanup="yes" \
		${ATSRC_PACKAGE_WORK}/configure --build=${host} \
						--host=${base_target} \
						--prefix="${at_dest}" \
						--with-headers="${at_dest}/include" \
						--with-tls \
						--enable-add-ons=nptl \
						--without-cvs \
						--without-selinux \
						--enable-kernel="${kernel}"
	else
		# Configure command for cross builds
		AUTOCONF="${autoconf}" \
		CC="${at_dest}/bin/${target64:-${target}}-gcc -m${AT_BIT_SIZE}" \
		CFLAGS="-g -O2" \
		AR="${at_dest}/bin/${target}-ar" \
		AS="${at_dest}/bin/${target}-as" \
		RANLIB="${at_dest}/bin/${target}-ranlib" \
		libc_cv_forced_unwind="yes" \
		libc_cv_c_cleanup="yes" \
		${ATSRC_PACKAGE_WORK}/configure --build=${host} \
						--host=${base_target} \
						--prefix="/usr" \
						--with-headers="${dest_cross}/usr/include" \
						--with-tls \
						--enable-add-ons=nptl \
						--disable-profile \
						--without-gd \
						--with-cpu=${build_load_arch} \
						--without-cvs \
						--with-tls \
						--with-__thread \
						--without-selinux \
						--enable-kernel="${kernel}"
	fi
}

atcfg_make() {
	${SUB_MAKE}
}

atcfg_install() {
	if [[ "${cross_build}" == "no" ]]; then
		${SUB_MAKE} install install_root="${install_place}"
	else
		${SUB_MAKE} install install_root="${install_place}/${dest_cross}"
	fi
}

atcfg_post_install() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	if [[ "${cross_build}" == "no" ]]; then
		rm -rf "${install_transfer}/var/db/Makefile"
		# Prepare the locale archive for inclusion in RPM.
		# We can't generate it yet because the files aren't available
		# on ${at_dest} yet, so we need a dummy file to guarantee it'll
		# be included in the package later.
		mkdir -p "${install_transfer}/${base_libdir}/locale"
		touch "${install_transfer}/${base_libdir}/locale/locale-archive"

		# Re-use time zone information available in the system.
		ln -s /usr/share/zoneinfo/ ${install_transfer}/share/zoneinfo
	else
		rm -rf "${install_place}/${dest_cross}/var/db/Makefile"
	fi
}
