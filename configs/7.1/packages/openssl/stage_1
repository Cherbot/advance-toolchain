#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

source ${AT_BASE}/scripts/utilities/bitsize_selection.sh

# OpenSSL build parameters for stage 1 32 or 64 bits
# =========================================
#

ATCFG_HOLD_TEMP_INSTALL='no'
# Tell the build system to hold the temp build folder
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='link'

atcfg_pre_configure() {
	PATH=${at_dest}/bin:${PATH} ./config --test-sanity
}

atcfg_configure() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	local base_target=$(find_build_target ${AT_BIT_SIZE})
	local openssl_tgt=""

	# OpenSSL uses different architecture names
	case "${base_target}" in
		powerpc64-*)
			openssl_tgt="linux-ppc64"
			;;
		powerpc-*)
			# For linux-ppc builds, OpenSSL uses the default -m
			# value of the compiler.
			openssl_tgt="linux-ppc -m32"
			;;
		powerpc64le-*)
		  openssl_tgt="linux-ppc64le"
		  ;;
		*)
			echo "Unknown word size ${AT_BIT_SIZE}"
			return 1
			;;
	esac

	PATH=${at_dest}/bin:${PATH} \
	AR="${at_dest}/bin/ar" \
	AS="${at_dest}/bin/as" \
	CC="${at_dest}/bin/gcc" \
	CXX="${at_dest}/bin/g++" \
	LD="${at_dest}/bin/ld" \
	RANLIB="${at_dest}/bin/ranlib" \
	./Configure ${openssl_tgt} \
		--prefix="${at_dest}" --libdir="${base_libdir}" \
		no-idea no-rc5 shared threads zlib-dynamic \
		-Wa,--noexecstack -g
}


atcfg_pre_make() {
	PATH=${at_dest}/bin:${PATH} make -j1 depend
}
# Make build command
atcfg_make() {
	PATH=${at_dest}/bin:${PATH} make -j1
}

atcfg_make_check() {
	# Package testing not done for cross build.
	if [[ "${cross_build}" == 'no' ]]; then
		PATH=${at_dest}/bin:${PATH} make -j1 test
	fi
}


atcfg_install() {
	local install_arg="install_sw"
	if [[ "${AT_BIT_SIZE}" == "64" ]]; then
		install_arg="install"
	fi
	PATH=${at_dest}/bin:${PATH} \
	make MANDIR="${at_dest}/share/man" \
	INSTALL_PREFIX=${install_place} -j1 ${install_arg}
}

atcfg_post_install() {
	# Save all libraries into a tar file
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	if [[ "${build_arch}" == "ppc" ]]; then
		pushd "${install_transfer}/lib"
		tar czf "${install_place}/openssl_32.tar.gz" *
		popd
		# Remove all installed built files
		rm -rf "${install_transfer}/*"
		mkdir "${install_transfer}/lib"
		# Place saved libs on created final target
		pushd "${install_transfer}/lib"
		tar xzf "${install_place}/openssl_32.tar.gz"
		popd
	fi
	set -e
	if [[ "${cross_build}" == 'no' ]]; then
                # Hack around to avoid ld.so.cache getting the libs from the
                # system as ldconfig puts platform based directories preceding
                # other directories.
		${AT_BASE}/scripts/utilities/create_lib_symlinks.sh \
			"${install_transfer}/${base_libdir}/" \
			"${install_transfer}/${base_libdir}/${build_load_arch}"
	fi
	set +e
}
