#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GLIBC build parameters for the headers stage 32/64 bits
# =============================================
#

# Preparation for the second gcc build. The first stage gcc isn't able to
# build the next components properly.  We need to setup glibc headers and some
# glibc objects in order to build a self-contained compiler.

# Include some standard functions
source ${utilities}/bitsize_selection.sh

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'

# Pre configure settings or commands to run
atcfg_pre_configure() {
	echo "cross-compiling=yes" > ./configparms
}

# Conditional configure command
atcfg_configure() {
	local base_target=$(find_build_target ${AT_BIT_SIZE})
	if [[ "${cross_build}" == "no" ]]; then
		# Configure command for native builds
		AUTOCONF=${autoconf} \
		CC="${at_dest}/bin/gcc -m${AT_BIT_SIZE}" \
		CFLAGS="-g -O2" \
		libc_cv_forced_unwind="yes" \
		libc_cv_c_cleanup="yes" \
		${ATSRC_PACKAGE_WORK}/configure \
					--build=${host} \
					--host=${base_target} \
					--prefix=${at_dest} \
					--with-headers="${at_dest}/include" \
					--with-tls \
					--without-fp \
					--disable-profile \
					--disable-sanity-checks \
					--enable-add-ons=nptl \
					--without-gd \
					--without-selinux \
					--without-cvs
	else
		# Configure command for cross builds
		AUTOCONF=${autoconf} \
		CC="${at_dest}/bin/${target64:-${target}}-gcc -m${AT_BIT_SIZE}" \
		CFLAGS="-g -O2" \
		AR="${at_dest}/bin/${target}-ar" \
		AS="${at_dest}/bin/${target}-as" \
		RANLIB="${at_dest}/bin/${target}-ranlib" \
		libc_cv_forced_unwind="yes" \
		libc_cv_c_cleanup="yes" \
		${ATSRC_PACKAGE_WORK}/configure \
					--build=${host} \
					--host=${base_target} \
					--prefix="/usr" \
					--with-headers="${dest_cross}/usr/include" \
					--with-tls \
					--disable-profile \
					--disable-sanity-checks \
					--enable-add-ons=nptl \
					--without-gd \
					--without-selinux \
					--without-cvs
	fi
}

# Conditional make command
atcfg_make() {
	if [[ "${cross_build}" == "no" ]]; then
		echo "No need to perform a make at this stage"
	else
		# We need to build the following in order to link shared libraries:
		make csu/subdir_lib
	fi
}

# Conditional install command
atcfg_install() {
	if [[ "${cross_build}" == "no" ]]; then
		${SUB_MAKE} install-headers install_root="${install_place}" install-bootstrap-headers="yes"
	else
		${SUB_MAKE} install-headers install_root="${install_place}/${dest_cross}" install-bootstrap-headers="yes"
	fi
}

# Conditional post install settings or commands to run
atcfg_post_install() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	if [[ "${cross_build}" == "no" ]]; then
		# The following is required because these two files arent copied
		# by make install-headers:
		[[ ! -d "${install_place}/${at_dest}/include/bits" ]] && \
			mkdir -p ${install_place}/${at_dest}/include/bits
		cp bits/stdio_lim.h ${install_place}/${at_dest}/include/bits/
		[[ ! -d "${install_place}/${at_dest}/include/gnu" ]] && \
			mkdir -p ${install_place}/${at_dest}/include/gnu
		cp ${ATSRC_PACKAGE_WORK}/include/gnu/stubs.h ${install_place}/${at_dest}/include/gnu/
	else
		# The following is required because these two files arent copied
		# by make install-headers:
		[[ ! -d "${install_place}/${dest_cross}/usr/include/bits" ]] && \
			mkdir -p ${install_place}/${dest_cross}/usr/include/bits
		cp bits/stdio_lim.h ${install_place}/${dest_cross}/usr/include/bits/
		[[ ! -d "${install_place}/${dest_cross}/usr/include/gnu" ]] && \
			mkdir -p ${install_place}/${dest_cross}/usr/include/gnu
		cp ${ATSRC_PACKAGE_WORK}/include/gnu/stubs.h ${install_place}/${dest_cross}/usr/include/gnu/
		[[ ! -d "${install_place}/${dest_cross}/usr/${base_libdir}" ]] && \
			mkdir -p ${install_place}/${dest_cross}/usr/${base_libdir}
		cp csu/crt1.o csu/crti.o csu/crtn.o ${install_place}/${dest_cross}/usr/${base_libdir}/
		# "libgcc_s.so" requires a "libc.so" to link against.  However,
		# since we will never actually execute its code, it doesnt matter what
		# it contains. So, treating "/dev/null" as a C source file, we produce
		# a dummy "libc.so":
		${at_dest}/bin/${target64:-${target}}-gcc -nostdlib -m${AT_BIT_SIZE} -nostartfiles \
			-shared -x c /dev/null -o ${install_place}/${dest_cross}/usr/${base_libdir}/libc.so
	fi
}
