#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# PAFlib build parameters for stage 1 32/64 bits
# ===========================================
#

# Include some standard functions
source ${utilities}/bitsize_selection.sh

source ${scripts}/utils.sh

# Tell the build system to hold the temp install folder
ATCFG_HOLD_TEMP_INSTALL='no'
# Tell the build system to hold the temp build folder
ATCFG_HOLD_TEMP_BUILD='no'
# PAFLib requires to copy the source code directory because we run autogen.sh
# on every build.  If this call happens at the same time, it may fail.
ATCFG_BUILD_STAGE_T='link'

atcfg_pre_configure () {
	# Completely clean the build prior to any build
	if [[ -e "Makefile" ]]; then
		make distclean
	fi

	set -e
	# Parse automake version
	am_path=$(which automake)
	am_ver=$(get_gnu_version ${am_path})
	am_major=$(echo ${am_ver} | awk -F . '{print $1}')
	am_minor=$(echo ${am_ver} | awk -F . '{print $2}')
	set +e
	# Work around a PAFLib incompatibility with automake 1.14.
	# We can safely remove this when PAFLib changes its behavior with files
	# in sub-directories.
	if [[ ${am_major} -le 1 && ${am_minor} -lt 14 ]]; then
		# Re-recreate configure script.
		sh ./autogen.sh
	fi
}

atcfg_configure () {
	local libdir=${at_dest}/$(find_build_libdir ${AT_BIT_SIZE})

	# However, it also requires to run configure from a different
	# directory.  So we're forced to duplicate source code and build in
	# another directory (build/ in this case).
	rm -rf build/
	mkdir build/
	pushd build > /dev/null

	PATH=${at_dest}/bin:${PATH} \
	CC="${at_dest}/bin/gcc -m${AT_BIT_SIZE}" \
	CXX="${at_dest}/bin/g++ -m${AT_BIT_SIZE}" \
	CFLAGS="-g -O" \
	CXXFLAGS="-g -O" \
		../configure --build=${host} \
			     --host=${host} \
			     --target=${host} \
			     --prefix=${at_dest} \
			     --libdir=${libdir} \
		|| return ${?}
	popd > /dev/null
}

atcfg_make () {
	pushd build > /dev/null
	# We're forced to use -f in order to work around an issue with the
	# mtime value of the files.  As git doesn't preserve it, GNU make
	# thinks that it must re-generate the Makefile upon every execution
	# because some m4 files do have the same mtime of Makefile.im.
	PATH=${at_dest}/bin:${PATH} \
		${SUB_MAKE} all -f ./Makefile || return ${?}
	popd > /dev/null
}

atcfg_make_check () {
	# Package testing is not done on a cross build
	if [[ "${cross_build}" == 'no' ]]; then
		pushd build > /dev/null
		# We're forced to use -f in order to work around an issue with the
		# mtime value of the files.  As git doesn't preserve it, GNU make
		# thinks that it must re-generate the Makefile upon every execution
		# because some m4 files do have the same mtime of Makefile.im.
		PATH=${at_dest}/bin:${PATH} \
			${SUB_MAKE} check -f ./Makefile || return ${?}
		popd > /dev/null
	fi
}

atcfg_install () {
	pushd build > /dev/null
	# We're forced to use -f in order to work around an issue with the
	# mtime value of the files.  As git doesn't preserve it, GNU make
	# thinks that it must re-generate the Makefile upon every execution
	# because some m4 files do have the same mtime of Makefile.im.
	PATH=${at_dest}/bin:${PATH} \
		make install DESTDIR=${install_place} -f ./Makefile \
		|| return ${?}
	popd > /dev/null
}

atcfg_post_install() {
	# Remove duplicated files prior final install when building
	# for the alternate target because the main target already provide
	# them.
	local base_target=$(find_build_target ${AT_BIT_SIZE})
	if [[ "${base_target}" == "${alternate_target}" ]]; then
		rm -rf ${install_place}/${at_dest}/{include,share}
	fi
}
