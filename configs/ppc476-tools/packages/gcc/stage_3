#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GCC build parameters for stage 3
# ================================
#

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'
# Don't fail if stage final install place doesn't exist
if [[ "${cross_build}" == "yes" ]]; then
	ATCFG_INSTALL_PEDANTIC="no"
fi

# GCC BUILD HACKS
# =========================================================
# Required pre build hacks
atcfg_pre_hacks() {
	# Clean static lib hack done on gcc stage 2 for GLIBC build.
	for Z in $(find "${at_dest}/lib" -name libgcc.a); do
		if [[ -h ${Z%\.a}_s.a ]]; then
			rm -f ${Z%\.a}_s.a
		fi
	done
	# Should run only on a native build... Skip these on cross
	if [[ "${cross_build}" == "no" ]]; then
		# Hack required to avoid a bug where gcc picks up the wrong crti.o,
		# causing ld to segfault in the stage3 build. We move the GCC required
		# static libs to a separate place and use it in the build.
		if [[ ! -d "${at_dest}/tmp/gcc_3" ]]; then
			mkdir -p ${at_dest}/tmp/gcc_3
		fi
		if [[ "${build_arch}" == "ppc64" ]]; then
			cp -t ${at_dest}/tmp/gcc_3 \
				  ${at_dest}/lib64/*gmp* \
				  ${at_dest}/lib64/*mpfr* \
				  ${at_dest}/lib64/*mpc*
		else
			cp -t ${at_dest}/tmp/gcc_3 \
				  ${at_dest}/lib/*gmp* \
				  ${at_dest}/lib/*mpfr* \
				  ${at_dest}/lib/*mpc*
		fi
	fi
}
# Required post install hacks (this one is run after the final install move)
atcfg_posti_hacks() {
	# Cleanup the temp files
	rm -rf ${at_dest}/tmp
}


# ATCFG_CONFIGURE SETTINGS
# =========================================================
# Conditional pre configure directives
atcfg_pre_configure() {
	if [[ "${cross_build}" == "no" ]]; then
		# native pre configure settings or commands to run
		cc_64=${system_cc}
		cxx_64=${system_cxx}
		libdir="${at_dest}/tmp/gcc_3"
		if [[ "${cross_build}" == "no" ]]; then
			if [[ "${build_arch}" == "ppc64" ]]; then
				if [[ "${default_compiler}" == "32" ]]; then
					cc_64="${gcc64}"
					cxx_64="${gpp64}"
				fi
			fi
		fi
	fi
}
# Conditional configure directives
atcfg_configure() {
	if [[ "${cross_build}" == "no" ]]; then
		# Native configure command for native builds
		CC="${cc_64}" \
		CXX="${cxx_64}" \
		CFLAGS="-O2 -mminimal-toc" \
		CXXFLAGS="-O2 -mminimal-toc" \
		AS="${at_dest}/bin/as" \
		LD="${at_dest}/bin/ld" \
		LDFLAGS="-L${libdir}" \
		${ATSRC_PACKAGE_WORK}/configure \
			--build=${target64:-$target} \
			--host=${target64:-$target} \
			--target=${target64:-$target} \
			--prefix="${at_dest}" \
			${with_longdouble:+--with-long-double-128} \
			${with_dfp_standalone:+--enable-decimal-float} \
			${secure_plt:+--enable-secureplt} \
			--enable-threads=posix \
			--enable-languages=c,c++ \
			--enable-__cxa_atexit \
			--disable-shared \
			--enable-checking=release \
			--enable-gnu-indirect-function \
			--disable-libgomp \
			--with-gmp-include="${at_dest}/include" \
			--with-gmp-lib=${libdir} \
			--with-mpfr-include="${at_dest}/include" \
			--with-mpfr-lib=${libdir} \
			--with-mpc-include="${at_dest}/include" \
			--with-mpc-lib=${libdir} \
			--without-ppl \
			--without-cloog \
			--without-libelf \
			--with-host-libstdcxx="-L${libdir} -lstdc++ -lsupc++ -lm -lgmp -lgmpxx -lmpfr -lmpc" \
			--with-as="${at_dest}/bin/as" \
			--with-ld="${at_dest}/bin/ld" \
			--with-cpu=${build_base_arch} \
			--with-tune=${build_optimization}
	fi
}


# ATCFG_MAKE SETTINGS
# =========================================================
# Conditional build directives
atcfg_make() {
	if [[ "${cross_build}" == "no" ]]; then
		# Native make build command
		${SUB_MAKE} all
	fi
}


# ATCFG_INSTALL SETTINGS
# =========================================================
# Conditional install directives
atcfg_install() {
	if [[ "${cross_build}" == "no" ]]; then
		# Install build command
		# GCC intermittently fails to install in parallel
		make -j1 install DESTDIR=${install_place}
	fi
}
