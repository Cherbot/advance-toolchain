#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GLIBC build parameters for stage 1 32/64 bits
# =============================================
#

# We can't use the newly built gcc to compile glibc because it will set the
# dynamic linker to be ${dest}/lib/ld.so.1, which isn't installed until the
# glibc build finishes.  So trying to run anything compiled with the new gcc
# will fail, in particular, glibc configure tests.  I suppose you might be
# able to supply glibc configure with lots of libc_cv_* variables to
# avoid this, but then you'd forever be changing this script to keep up with
# new glibc configure tests.
# Note that dynamically linked programs built here with the old host gcc are
# subtly broken too;  The glibc build sets their dynamic linker to
# ${dest}/lib/ld.so.1 but doesn't provide rpath.  Which means you'll get the
# new ld.so trying to use the system libc.so, which doesn't work.  ld.so and
# libc.so share data structures so are tightly coupled.  To run the new
# programs, you need to set LD_LIBRARY_PATH for them, or better (so as to not
# affect forked commands that might need the system libs), run ld.so.1
# explicitly, passing --library-path as is done for localedef below.
# This is one of the reasons why you need to build glibc twice.

# Include some standard functions
source ${utilities}/bitsize_selection.sh

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'

# GLIBC BUILD HACKS
# =========================================================
# Required post build hacks (this one is run after the temp install step)
atcfg_post_hacks() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	local base_bindir=$(find_build_bindir ${AT_BIT_SIZE})
	if [[ "${cross_build}" == "no" ]]; then
		# Generate the required locales for 32 bits GLIBC
		mkdir -p "${install_transfer}/${base_libdir}/locale"
		sed -n -e "/SUPPORTED-LOCALES/,$ s@\([^/]*\)/\([^ \\]*\).*@\1 \2@p" < \
			"${ATSRC_PACKAGE_WORK}/localedata/SUPPORTED" | sort | \
			while read l c x; do \
				echo localedef -i ${l%\.*} -f ${c} ${l}
				"${install_transfer}/${base_libdir}/ld.so.1" --library-path "${install_transfer}/${base_libdir}" \
					"${install_transfer}/${base_bindir}/localedef" -i ${l%\.*} -f ${c} ${l}
			done
		unset locale l c x
	fi
}


# ATCFG_CONFIGURE SETTINGS
# =========================================================
# Conditional configure commands
atcfg_pre_configure() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	local base_bindir=$(find_build_bindir ${AT_BIT_SIZE})
	local base_sbindir=$(find_build_sbindir ${AT_BIT_SIZE})
	local base_libexecdir=$(find_build_libexecdir ${AT_BIT_SIZE})
	if [[ "${cross_build}" == "no" ]]; then
		# Pre configure settings or commands to run
		echo cross-compiling=yes                        >  ./configparms
		echo slibdir="${at_dest}/${base_libdir}"        >> ./configparms
		echo libdir="${at_dest}/${base_libdir}"         >> ./configparms
		echo bindir="${at_dest}/${base_bindir}"         >> ./configparms
		echo sbindir="${at_dest}/${base_sbindir}"       >> ./configparms
		echo libexecdir="${at_dest}/${base_libexecdir}" >> ./configparms
		echo rootsbindir="${at_dest}/${base_sbindir}"   >> ./configparms
	else
		# Pre configure settings or commands to run
		echo cross-compiling=yes > ./configparms
	fi
}
# Conditional configure commands
atcfg_configure() {
	local base_target=$(find_build_target ${AT_BIT_SIZE})
	if [[ "${cross_build}" == "no" ]]; then
		# Configure command for native builds
		AUTOCONF="${autoconf}" \
		CC="${at_dest}/bin/gcc -m${AT_BIT_SIZE}" \
		CFLAGS="-g -O2 ${secure_plt:+-msecure-plt}" \
		libc_cv_forced_unwind="yes" \
		libc_cv_c_cleanup="yes" \
		${ATSRC_PACKAGE_WORK}/configure --build=${host} \
										--host=${base_target} \
										--prefix="${at_dest}" \
										--with-headers="${at_dest}/include" \
										--enable-add-ons=nptl \
										--without-cvs \
										--enable-kernel="${kernel}"
	else
		# Configure command for cross builds
		AUTOCONF="${autoconf}" \
		CC="${at_dest}/bin/${target64:-${target}}-gcc -m${AT_BIT_SIZE}" \
		CFLAGS="-g -O2" \
		AR="${at_dest}/bin/${target}-ar" \
		AS="${at_dest}/bin/${target}-as" \
		RANLIB="${at_dest}/bin/${target}-ranlib" \
		libc_cv_forced_unwind="yes" \
		libc_cv_c_cleanup="yes" libc_cv_ctors_header=yes \
		${ATSRC_PACKAGE_WORK}/configure --build=${host} \
										--host=${base_target} \
										--prefix="/usr" \
										--without-cvs \
										--enable-add-ons=libidn,nptl \
										--disable-profile \
										--without-selinux \
										--enable-stackguard-randomization \
										--with-headers="${dest_cross}/usr/include" \
										--enable-multi-arch \
										--enable-kernel="${kernel}" \
										--without-gd \
										--with-cpu=${build_load_arch}
	fi
}


# ATCFG_MAKE SETTINGS
# =========================================================
# Make build command
atcfg_make() {
	${SUB_MAKE}
}


# ATCFG_INSTALL SETTINGS
# =========================================================
# Conditional install command
atcfg_install() {
	if [[ "${cross_build}" == "no" ]]; then
		# Install build command
		${SUB_MAKE} install install_root="${install_place}"
	else
		# Install build command
		${SUB_MAKE} install install_root="${install_place}/${dest_cross}"
	fi
}
# Conditional post install command
atcfg_post_install() {
	if [[ "${cross_build}" == "no" ]]; then
		# Post install settings or commands to run
		rm -rf "${install_transfer}/var/db/Makefile"
		# Remove static libraries (undesired on ppc476-tools)
		find "${install_transfer}" -name "lib*.a" ! -name "lib*_nonshared.a" -delete
	else
		# Post install settings or commands to run
		rm -rf "${install_place}/${dest_cross}/var/db/Makefile"
		# Remove static libraries (undesired on ppc476-tools)
		find "${install_transfer}" -name "lib*.a" ! -name "lib*_nonshared.a" -delete
	fi
}
