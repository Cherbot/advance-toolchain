#!/usr/bin/env bash
#
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# GLIBC build parameters for stage 2 32 bits
# ==========================================
#

# The build of glibc was almost full featured.  In this build the new GCC is
# used to compile a highly optimized glibc with all the required features.

# Include some standard functions
source ${utilities}/bitsize_selection.sh

ATCFG_HOLD_TEMP_INSTALL='no'
ATCFG_HOLD_TEMP_BUILD='no'
# Build in a new directory
ATCFG_BUILD_STAGE_T='dir'

# GLIBC BUILD HACKS
# =========================================================
# Required pre build hacks
atcfg_pre_hacks() {
	# Hack the glibc source so that the -rpath option we add on all shared libs
	# and executable wont bomb ld.so, which checks that -rpath is not given.
	s1="s@assert (\(info\[DT_R.*PATH\]\) == NULL)@\1 = NULL@"
	for F in "${ATSRC_PACKAGE_WORK}/elf/dynamic-link.h"; do
		sed -e "${s1}" < "${F}" > tmp.$$ \
			&& { cmp -s tmp.$$ "${F}" || mv -f tmp.$$ "${F}"; } || exit 1
		rm -f tmp.$$
	done
}


# ATCFG_CONFIGURE SETTINGS
# =========================================================
# Pre configure settings or commands to run
atcfg_pre_configure() {
	local base_libdir=$(find_build_libdir ${AT_BIT_SIZE})
	local base_bindir=$(find_build_bindir ${AT_BIT_SIZE})
	local base_sbindir=$(find_build_sbindir ${AT_BIT_SIZE})
	local base_libexecdir=$(find_build_libexecdir ${AT_BIT_SIZE})
	echo slibdir="${at_dest}/${base_libdir}"        >  ./configparms
	echo libdir="${at_dest}/${base_libdir}"         >> ./configparms
	echo bindir="${at_dest}/${base_bindir}"         >> ./configparms
	echo sbindir="${at_dest}/${base_sbindir}"       >> ./configparms
	echo libexecdir="${at_dest}/${base_libexecdir}" >> ./configparms
	echo rootsbindir="${at_dest}/${base_sbindir}"   >> ./configparms
	echo cross-compiling=no                         >> ./configparms
}
# Configure command for native builds
atcfg_configure() {
	local base_target=$(find_build_target ${AT_BIT_SIZE})
	PATH=${at_dest}/bin:${PATH} \
	AUTOCONF="${autoconf}" \
	CC="${at_dest}/bin/gcc -m${AT_BIT_SIZE}" \
	CXX="${at_dest}/bin/g++ -m${AT_BIT_SIZE}" \
	CFLAGS="-g -O3 ${with_longdouble:+-mlong-double-128}" \
	CXXFLAGS="-g -O3" \
	${ATSRC_PACKAGE_WORK}/configure --build=${host} \
									--host=${base_target} \
									--prefix="${at_dest}" \
									--without-cvs \
									--enable-add-ons=libidn,nptl \
									--without-selinux \
									--enable-stackguard-randomization \
									--with-headers="${at_dest}/include" \
									--enable-shared \
									--enable-multi-arch \
									--with-cpu=${build_load_arch/ppc/} \
									--enable-kernel="${kernel}"
}


# ATCFG_MAKE SETTINGS
# =========================================================
# Make build command
atcfg_make() {
	PATH=${at_dest}/bin:${PATH} ${SUB_MAKE}
}


# ATCFG_INSTALL SETTINGS
# =========================================================
# Conditional install command
atcfg_install() {
	if [[ "${cross_build}" == "no" ]]; then
		# Install build command
		PATH=${at_dest}/bin:${PATH} ${SUB_MAKE} install install_root="${install_place}"
	else
		# Install build command
		PATH=${at_dest}/bin:${PATH} ${SUB_MAKE} install install_root="${install_place}/${dest_cross}"
	fi
}
# Conditional post install command
atcfg_post_install() {
	if [[ "${cross_build}" == "no" ]]; then
		# Post install settings or commands to run
		# Remove unused Makefile from install
		rm -rf "${install_transfer}/var/db/Makefile"
		# Removing the created ld.so.cache to avoid further problems
		rm -rf "${install_transfer}/etc/ld.so.cache"
		# Remove static libraries (undesired on ppc476-tools)
		find "${install_transfer}" -name "lib*.a" ! -name "lib*_nonshared.a" -delete
	else
		# Post install settings or commands to run
		# Remove unused Makefile from install
		rm -rf "${install_place}/${dest_cross}/var/db/Makefile"
		# Removing the created ld.so.cache to avoid further problems
		rm -rf "${install_place}/${dest_cross}/etc/ld.so.cache"
		# Remove static libraries (undesired on ppc476-tools)
		find "${install_transfer}" -name "lib*.a" \
		     ! -name "lib*_nonshared.a" -delete
	fi
}
