#! /usr/bin/expect
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Test if AT can link with xlc compiled code, i.e. compile with xlc and link
# with AT.

source ./shared.exp

set at_dir $env(AT_DEST)
set rc 0

if {[info exists env(AT_WD)]} {
	printit "Skipping: running test suite on a compatible mode with the\
build system.\t\[SUCCESS\]"
	exit $ENOSYS
}

# Run the commands to compile with xlc and link with AT
#
# Parameters:
# xlc		The path to xlc binary.
# cfg		The path to the xlc configuration file to be used.
# wordsize	The size of the word in use.  Could be either 32 or 64.
#
proc test_xlc { xlc cfg wordsize } {
	global ERROR
	global FULLPATH
	global ENOSYS

	# Use AT as linker
	set LD [compiler_path]
	set LIBS "-lm"
	set LDFLAGS "-O2 -Wall"

	set obj_file [exec mktemp]
	set rc 0

	# Compile the code using xlc (without linking).
	printitcont "Test ${wordsize}-bit static linking with ${xlc}..."
	if { ${cfg} != "none" } {
		set err [catch {exec ${xlc} -q${wordsize} -F ${cfg} \
				    -c ${FULLPATH}/test.c \
				    -o ${obj_file}} msg]
	} else {
		set err [catch {exec ${xlc} -q${wordsize} \
				    -c ${FULLPATH}/test.c \
				    -o ${obj_file}} msg]
	}
	if { ${err} > 0 } {
		# The execution of xlc always returns errors due to messages
		# printed on stderr.
		# We can safely print them and continue to the linking phase
		# as the next steps going to capture the error if something
		# unexpected happens.
		printit "${msg}"
	}

	set exe_file [exec mktemp]

	# Static linking with AT.
	set err [catch {compile "${LD} -m${wordsize} -static ${LDFLAGS} \
				${obj_file} ${LIBS} -o ${exe_file}"} msg]
	if { ${err} > 0 } {
		set rc 1
		printit "${msg}" $ERROR
	} else {
		printit "${wordsize}-bit static linking between \
xlc and AT successful"
	}

	# Dynamic linking with AT.
	set {err} [catch {compile "${LD} -m${wordsize} ${LDFLAGS} \
				${obj_file} ${LIBS} -o ${exe_file}"} msg]
	if { $err > 0 } {
		set rc 1
		printit "${msg}" $ERROR
	} else {
		printit "${wordsize}-bit dynamic linking between \
xlc and AT successful"
	}

	file delete -force ${obj_file} ${exe_file}

	return ${rc}
}


# Begin the XLC test
printit "Testing the xlc compiler linking with AT..."

set xlc_dirs [ get_xlc_paths ]
if { [llength ${xlc_dirs}] == 0 } {
	printit "Skipping: xlc isn't installed."
	exit ${ENOSYS}
}

set at_ver [string toupper [regsub -all \\. [file tail $env(AT_DEST)] \_]]

# Test with all installed versions of XLC
foreach dir ${xlc_dirs} {
	# Print initial message
	printit "Testing ${dir}..."
	# Set full path of XLC compiler to test
	set xlc "${dir}/bin/xlc"
	# Set the new_install (or xlc_configure -at) generated config file.
	set xlc_at "${dir}/bin/xlc_at"
	# Find the default config file build by AT install
	set compiler [file tail [file dirname ${dir}]]
	regsub -all "\\." [file tail ${dir}] "_" xl_ver
	set xlc_cfg "${at_dir}/scripts/${compiler}-${xl_ver}-${at_ver}.dfp.cfg"
	# Clean up revious lists if they were defined
	if { [info exists compilers] } {unset compilers}
	if { [info exists configures] } {unset configures}
	# Set the default value (0) for new_install status usage
	set new_install 0

	# Perform a search of available config files (first the one provided by
	# new_install, and if it isn't found, try the usual one). Prepare a list
	# of configs found for testing, and generate an error if none of them
	# were found.
	if { ! [file exists ${xlc_at}] } {
		printit "No ${xlc_at} configuration script found. \
			Skipping it." ${ERROR}
	} else {
		# Flag the existence of new_install configuration
		set new_install 1
		# Add the information to proceed the tests below
		lappend compilers ${xlc_at}
		lappend configures "none"
	}
	if { ! [file exists ${xlc_cfg}] } {
		# Inform the error
		printit "${xlc_cfg} configuration file does not exist." ${ERROR}
		if { ${new_install} == 0 } {
			printit "Can't find *any* XLC configuration file for ${dir} \
				install." ${ERROR}
			# Set error and continue
			set rc 1
			continue
		}
	} else {
		# Add the standard XLC compiler with AT configuration
		lappend compilers ${xlc}
		lappend configures ${xlc_cfg}
	}

	foreach compiler ${compilers} configure ${configures} {
		if { ${TARGET32} } {
			if { [test_xlc ${compiler} ${configure} 32] } {
				set rc 1
			}
		}
		if { ${TARGET64} } {
			if { [test_xlc ${compiler} ${configure} 64] } {
				set rc 1
			}
		}
	}
}

if { ${rc} == 0 } {
	printit "Testing the xlc compiler linked with AT:\t\t\t\[SUCCESS\]"
}

exit ${rc}
