#! /usr/bin/expect
# Copyright 2017 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This script takes a log file generated by the fvtr.sh script and builds
# a report.  The report lists the tests run down the left-hand column and
# list the tested platforms along the top row.  The purpose of the report
# is to give a quick summary of what tests have been run for each platform.

# This procedure just draws a line of '-'
proc drawline {} {
global FIELDSIZE
global NUMofFIELDS
for {set i 1} { $i <= [expr ($FIELDSIZE * $NUMofFIELDS) + $NUMofFIELDS] } { incr i 1} {
	puts -nonewline "-"
}
puts ""
}

set REPORTFILE [lindex $argv 0]
set OUTPUT "matrix.txt"
set TESTSRUN ""
# List the ATs that will be tested
set TESTED_ATs "power5 power6 power7 Xpower5 Xpower6 Xpower7"
set aBLANK " " 
set aBREAK ":"
set FIELDSIZE 12
set NUMofFIELDS [expr [llength $TESTED_ATs] + 1 ]
set ALIST [exec find -type d] 

# build a list of tests (each subdirectory will contain a test
foreach TEST $ALIST {
	set TEMP [exec echo $TEST | sed s#./##]
	#puts $TEMP
	#set TEMP [exec echo $TEST | sed 's/\.//']
	lappend TESTSRUN $TEMP
}
#puts $TESTSRUN

# Go thru each dir and concat the logfile into one file to 
# build the report from
foreach ATEST $TESTSRUN {
	if {[ file exists "./$ATEST/$REPORTFILE"] == 1 } {
		exec cat "./$ATEST/$REPORTFILE" >> $REPORTFILE 
	}
}

foreach ATEST $TESTSRUN {
	if {[ file exists "./$ATEST/$ATEST.exp"] == 1 } {
		foreach AT $TESTED_ATs {
			set CELL($ATEST,$AT) "----"
		}
	}
}

#set fd [open $OUTPUT w]

foreach ATEST $TESTSRUN {
	if {[ file exists "./$ATEST/$ATEST.exp"] == 1 } {
		foreach AT $TESTED_ATs {
			if [catch {set aline [exec grep "$ATEST: $AT:.\*SUCCESS" $REPORTFILE]} input] {
				set CELL($ATEST,$AT) "xxxx"
			} else {
				set CELL($ATEST,$AT) "good"
				set goodrun "yes"
			}
		}
	}
}


#lets try and build a report
drawline 
for {set i 1} { $i <= $FIELDSIZE } { incr i 1} {
	puts -nonewline $aBLANK
}
puts -nonewline "$aBREAK"
foreach aAT  $TESTED_ATs {
	set numBLANKS [expr ($FIELDSIZE - [string length $aAT] +1)/2]
	for {set i 1} { $i <= $numBLANKS } { incr i 1} {
		puts -nonewline $aBLANK
	}
	puts -nonewline $aAT
	set numBLANKS [expr ($FIELDSIZE - [string length $aAT] )/2]
	for {set i 1} { $i <= $numBLANKS } { incr i 1} {
		puts -nonewline $aBLANK
	}
	puts -nonewline "$aBREAK"
}
puts ""
drawline

foreach ATEST $TESTSRUN {
	if {[ file exists "./$ATEST/$ATEST.exp"] == 1 } {
		puts -nonewline $ATEST
		set numBLANKS [expr $FIELDSIZE - [string length $ATEST] ]
		for {set i 1} { $i <= $numBLANKS } { incr i 1} {
			puts -nonewline $aBLANK
		}
		puts -nonewline "$aBREAK"
		foreach AT $TESTED_ATs {
			set numBLANKS [expr ($FIELDSIZE - [string length $CELL($ATEST,$AT)] +1)/2]
			for {set i 1} { $i <= $numBLANKS } { incr i 1} {
				puts -nonewline $aBLANK
			}
			puts -nonewline "$CELL($ATEST,$AT)"
			set numBLANKS [expr ($FIELDSIZE - [string length $CELL($ATEST,$AT)] )/2]
			for {set i 1} { $i <= $numBLANKS } { incr i 1} {
				puts -nonewline $aBLANK
			}
			puts -nonewline "$aBREAK"
		}
	puts ""
	drawline
	}
}

if {[ file exists "$REPORTFILE"] == 1 } {
	exec mv $REPORTFILE $REPORTFILE.bak
}
#close $fd

